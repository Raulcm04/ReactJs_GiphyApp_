{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/Loader.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","console","warn","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","gif","className","src","alt","Loader","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNAgCeA,EA5BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACFC,mBAAS,IADP,mBAChCC,EADgC,KACpBC,EADoB,KAexC,OACC,0BAAMC,SAVe,SAACC,GAChBA,EAAEC,iBACc,KAAbJ,GACCF,GAAc,SAAAO,GAAU,OAAGL,GAAH,mBAAiBK,OACzCJ,EAAc,KAEdK,QAAQC,KAAK,WAKtB,2BAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAfd,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,UAenB,4BAAQD,KAAK,UAAb,Y,uBCtBCI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAaZM,GAbY,4CAAH,sDCaLO,EAXK,SAAC,GAAW,IAAVC,EAAS,EAATA,IAGrB,OACC,yBAAMC,UAAU,4CACf,yBAAKC,IAAKF,EAAId,IAAKiB,IAAI,KACvB,2BAAKH,EAAIJ,OAAU,sBCSPQ,EAfA,WACd,OACC,yBAAKH,UAAU,kBACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,oBCKJI,EAXC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACbd,mBAAS,CACpCqB,KAAM,GACNe,SAAS,IAH+B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBzC,OAZAC,qBAAU,WAGR1B,EAAQC,GAAU0B,MAAK,SAAClB,GACvBgB,EAAS,CACRjB,KAAMC,EACNc,SAAS,SAIV,CAACtB,IAEGuB,EDfmBI,CAAa3B,GAA/BO,EADyB,EACzBA,KAAMe,EADmB,EACnBA,QACd,OACC,kBAAC,WAAD,KACC,gCAAMtB,EAAN,KACCsB,GAAW,kBAAC,EAAD,MACZ,yBAAKL,UAAU,aAAaV,EAAKE,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAAakB,IAAKlB,EAAIC,GAAIK,IAAKN,UEejEmB,EApBM,WAErB,IAF2B,EAIS3C,mBAF1B,CAAC,SAFgB,mBAIpBM,EAJoB,KAIRP,EAJQ,KAM1B,OACC,yBAAKgC,UAAU,aACd,4CACS,kBAAC,EAAD,CAAahC,cAAeA,IACrC,6BACS,6BACKO,EAAWiB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,GAAWA,SCVjE8B,IAASC,OACL,kBAAE,EAAF,MACFC,SAASC,eAAe,U","file":"static/js/main.3f4d6323.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\tconst [ inputValue, setInputValue ] = useState('');\r\n\tconst handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    };\r\n    \r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        if(inputValue!==''){\r\n            setCategories(categories=>[inputValue,...categories])\r\n            setInputValue('')\r\n        }else{\r\n            console.warn('error');\r\n        }\r\n    }\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type=\"text\" value={inputValue} onChange={handleInputChange}  />\r\n            <button type='submit'>Enviar</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=qu8yxC9RzldxBc5jxWRtK9rjnR2HacLB`;\r\n\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        };\r\n    });\r\n    return gifs;\r\n};","import React from 'react';\r\n\r\nconst GifGridItem = ({gif}) => {\r\n    // console.log(gif);\r\n    \r\n\treturn (\r\n\t\t<div  className=\"card animate__animated animate__backInUp\">\r\n\t\t\t<img src={gif.url} alt=\"\" />\r\n\t\t\t<p>{(gif.title) || 'Without title---'}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\n\r\nconst Loader = () => {\r\n\treturn (\r\n\t\t<div className=\"content-loader\">\r\n\t\t\t<div className=\"sk-chase \">\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t\t<div className=\"sk-chase-dot\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\nimport Loader from './Loader';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\tconst { data, loading } = useFetchGifs(category);\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h2> {category} </h2>\r\n\t\t\t{loading && <Loader />}\r\n\t\t\t<div className=\"card-grid\">{data.map((img) => <GifGridItem key={img.id} gif={img} />)}</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [ state, setstate ] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\t// let randomTime= Math.random()*1000/2*5\r\n\t\t// setTimeout(() => {\r\n\t\t\tgetGifs(category).then((gifs) => {\r\n\t\t\t\tsetstate({\r\n\t\t\t\t\tdata: gifs,\r\n\t\t\t\t\tloading: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t// }, 1000);\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { Fragment as div } from 'react';\r\nimport { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n// import { getGifs } from './helpers/GetGifs';\r\n\r\nconst GifExpertApp = () => {\r\n\r\nconst arr=['Hola']\r\n\r\nconst [categories, setCategories] = useState(arr)\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n            <div>\r\n                {categories.map(category=>(\r\n                    <GifGrid key={category} category={category}>{category}</GifGrid>\r\n                ))}\r\n            </div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css';\nimport GifExpertApp from './GifExpertApp';\n// import GifExpertApp from './components/GifExpertApp';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    < GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}